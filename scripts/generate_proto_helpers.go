package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	_ "github.xubinbest.com/go-game-server/internal/pb"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
)

const (
	dispatcherTemplate = `// Code generated by generate_proto_helpers. DO NOT EDIT.
package messagerouter

import (
	"context"
	"fmt"

	"github.xubinbest.com/go-game-server/internal/pb"
	"github.xubinbest.com/go-game-server/internal/utils"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"
)

func DispatchGRPCRequest(ctx context.Context, conn interface{}, req proto.Message) (proto.Message, error) {
	name := proto.MessageName(req)

	switch name {
	{{range .Cases}}case "{{.FullName}}":
		client := pb.New{{.ServiceName}}Client(conn.(*grpc.ClientConn))
		resp, err := client.{{.MethodName}}(ctx, req.(*pb.{{.MessageName}}))
		if err != nil {
			utils.Error("Error calling {{.MethodName}}", zap.Error(err))
			return nil, err
		}
		return resp, nil
	{{end}}default:
		utils.Error("Unknown request type", zap.String("name", string(name)))
		return nil, fmt.Errorf("unsupported message type: %s", name)
	}
}
`

	messageStructTemplate = `// Code generated by generate_proto_helpers. DO NOT EDIT.
package msgfactory

import (
	"fmt"

	"github.xubinbest.com/go-game-server/internal/pb"
	"google.golang.org/protobuf/proto"
)

func GetRequestMessageStruct(msgType string) (proto.Message, error) {
	switch msgType {
	{{range .RequestMessages}}case "{{.Package}}.{{.Name | trimRequest | toLowerFirst}}":
		return &pb.{{.Name}}{}, nil
	{{end}}default:
		return nil, fmt.Errorf("unknown request message type: %s", msgType)
	}
}

func GetResponseMessageStruct(msgType string) (proto.Message, error) {
	switch msgType {
	{{range .ResponseMessages}}case "{{.Package}}.{{.Name | trimResponse | toLowerFirst}}":
		return &pb.{{.Name}}{}, nil
	{{end}}default:
		return nil, fmt.Errorf("unknown response message type: %s", msgType)
	}
}
`
)

type CaseData struct {
	FullName    string
	ServiceName string
	MessageName string
	MethodName  string
}

type MessageData struct {
	FullName string
	Package  string
	Name     string
}

func main() {
	var cases []CaseData
	var requestMessages []MessageData
	var responseMessages []MessageData

	protoregistry.GlobalFiles.RangeFiles(func(fd protoreflect.FileDescriptor) bool {
		// Collect service methods for dispatcher
		services := fd.Services()
		for i := 0; i < services.Len(); i++ {
			service := services.Get(i)
			methods := service.Methods()
			for j := 0; j < methods.Len(); j++ {
				method := methods.Get(j)
				inputType := method.Input()
				fullName := string(inputType.FullName())

				exists := false
				for _, c := range cases {
					if c.FullName == fullName {
						exists = true
						break
					}
				}

				if !exists {
					cases = append(cases, CaseData{
						FullName:    fullName,
						ServiceName: string(service.Name()),
						MessageName: string(inputType.Name()),
						MethodName:  string(method.Name()),
					})
				}
			}
		}

		// Collect messages for message struct getter
		msgDescriptors := fd.Messages()
		for i := 0; i < msgDescriptors.Len(); i++ {
			msg := msgDescriptors.Get(i)
			name := string(msg.Name())
			if strings.HasSuffix(name, "Request") {
				requestMessages = append(requestMessages, MessageData{
					FullName: string(msg.FullName()),
					Package:  string(fd.Package()),
					Name:     name,
				})
			} else if strings.HasSuffix(name, "Response") {
				responseMessages = append(responseMessages, MessageData{
					FullName: string(msg.FullName()),
					Package:  string(fd.Package()),
					Name:     name,
				})
			}
		}
		return true
	})

	// Generate dispatcher
	generateFile("../internal/gateway/messagerouter/grpc_dispatcher.gen.go",
		dispatcherTemplate, map[string]interface{}{"Cases": cases})

	// Generate message struct getter
	generateFile("../internal/gateway/msgfactory/message_struct.go",
		messageStructTemplate, map[string]interface{}{
			"RequestMessages":  requestMessages,
			"ResponseMessages": responseMessages,
		})

	fmt.Println("Proto helpers generated successfully")
}

func generateFile(path, tmplStr string, data interface{}) {
	funcMap := template.FuncMap{
		"toLowerFirst": func(s string) string {
			if len(s) == 0 {
				return s
			}
			return strings.ToLower(s[:1]) + s[1:]
		},
		"trimRequest": func(s string) string {
			return strings.TrimSuffix(s, "Request")
		},
		"trimResponse": func(s string) string {
			return strings.TrimSuffix(s, "Response")
		},
	}

	tmpl, err := template.New("generator").Funcs(funcMap).Parse(tmplStr)
	if err != nil {
		panic(err)
	}

	// 确保目录存在
	dir := filepath.Dir(path)
	if err := os.MkdirAll(dir, 0755); err != nil {
		panic(err)
	}

	file, err := os.Create(path)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	if err := tmpl.Execute(file, data); err != nil {
		panic(err)
	}
}
