// Code generated by generate_proto_helpers. DO NOT EDIT.
package messagerouter

import (
	"context"
	"fmt"

	"github.xubinbest.com/go-game-server/internal/pb"
	"github.xubinbest.com/go-game-server/internal/utils"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"
)

func DispatchGRPCRequest(ctx context.Context, conn interface{}, req proto.Message) (proto.Message, error) {
	name := proto.MessageName(req)

	switch name {
	case "game.JoinGameRequest":
		client := pb.NewGameServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.JoinGame(ctx, req.(*pb.JoinGameRequest))
		if err != nil {
			utils.Error("Error calling JoinGame", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "game.LeaveGameRequest":
		client := pb.NewGameServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.LeaveGame(ctx, req.(*pb.LeaveGameRequest))
		if err != nil {
			utils.Error("Error calling LeaveGame", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "game.GameStateRequest":
		client := pb.NewGameServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetGameState(ctx, req.(*pb.GameStateRequest))
		if err != nil {
			utils.Error("Error calling GetGameState", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "game.PlayerActionRequest":
		client := pb.NewGameServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.PlayerAction(ctx, req.(*pb.PlayerActionRequest))
		if err != nil {
			utils.Error("Error calling PlayerAction", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.GetFriendListRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetFriendList(ctx, req.(*pb.GetFriendListRequest))
		if err != nil {
			utils.Error("Error calling GetFriendList", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.SendFriendRequestRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.SendFriendRequest(ctx, req.(*pb.SendFriendRequestRequest))
		if err != nil {
			utils.Error("Error calling SendFriendRequest", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.GetFriendRequestListRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetFriendRequestList(ctx, req.(*pb.GetFriendRequestListRequest))
		if err != nil {
			utils.Error("Error calling GetFriendRequestList", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.HandleFriendRequestRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.HandleFriendRequest(ctx, req.(*pb.HandleFriendRequestRequest))
		if err != nil {
			utils.Error("Error calling HandleFriendRequest", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.BatchHandleFriendRequestRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.BatchHandleFriendRequest(ctx, req.(*pb.BatchHandleFriendRequestRequest))
		if err != nil {
			utils.Error("Error calling BatchHandleFriendRequest", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.DeleteFriendRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.DeleteFriend(ctx, req.(*pb.DeleteFriendRequest))
		if err != nil {
			utils.Error("Error calling DeleteFriend", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.CreateGuildRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.CreateGuild(ctx, req.(*pb.CreateGuildRequest))
		if err != nil {
			utils.Error("Error calling CreateGuild", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.GetGuildInfoRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetGuildInfo(ctx, req.(*pb.GetGuildInfoRequest))
		if err != nil {
			utils.Error("Error calling GetGuildInfo", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.GetGuildMembersRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetGuildMembers(ctx, req.(*pb.GetGuildMembersRequest))
		if err != nil {
			utils.Error("Error calling GetGuildMembers", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.ApplyToGuildRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.ApplyToGuild(ctx, req.(*pb.ApplyToGuildRequest))
		if err != nil {
			utils.Error("Error calling ApplyToGuild", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.InviteToGuildRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.InviteToGuild(ctx, req.(*pb.InviteToGuildRequest))
		if err != nil {
			utils.Error("Error calling InviteToGuild", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.GetGuildApplicationsRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetGuildApplications(ctx, req.(*pb.GetGuildApplicationsRequest))
		if err != nil {
			utils.Error("Error calling GetGuildApplications", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.HandleGuildApplicationRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.HandleGuildApplication(ctx, req.(*pb.HandleGuildApplicationRequest))
		if err != nil {
			utils.Error("Error calling HandleGuildApplication", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.KickGuildMemberRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.KickGuildMember(ctx, req.(*pb.KickGuildMemberRequest))
		if err != nil {
			utils.Error("Error calling KickGuildMember", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.ChangeMemberRoleRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.ChangeMemberRole(ctx, req.(*pb.ChangeMemberRoleRequest))
		if err != nil {
			utils.Error("Error calling ChangeMemberRole", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.TransferGuildMasterRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.TransferGuildMaster(ctx, req.(*pb.TransferGuildMasterRequest))
		if err != nil {
			utils.Error("Error calling TransferGuildMaster", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.DisbandGuildRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.DisbandGuild(ctx, req.(*pb.DisbandGuildRequest))
		if err != nil {
			utils.Error("Error calling DisbandGuild", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.LeaveGuildRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.LeaveGuild(ctx, req.(*pb.LeaveGuildRequest))
		if err != nil {
			utils.Error("Error calling LeaveGuild", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.GetGuildListRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetGuildList(ctx, req.(*pb.GetGuildListRequest))
		if err != nil {
			utils.Error("Error calling GetGuildList", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.SendChatMessageRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.SendChatMessage(ctx, req.(*pb.SendChatMessageRequest))
		if err != nil {
			utils.Error("Error calling SendChatMessage", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "social.GetChatMessagesRequest":
		client := pb.NewSocialServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetChatMessages(ctx, req.(*pb.GetChatMessagesRequest))
		if err != nil {
			utils.Error("Error calling GetChatMessages", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "leaderboard.ReportScoreRequest":
		client := pb.NewLeaderboardServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.ReportScore(ctx, req.(*pb.ReportScoreRequest))
		if err != nil {
			utils.Error("Error calling ReportScore", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "leaderboard.GetLeaderboardRequest":
		client := pb.NewLeaderboardServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetLeaderboard(ctx, req.(*pb.GetLeaderboardRequest))
		if err != nil {
			utils.Error("Error calling GetLeaderboard", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "leaderboard.GetRankRequest":
		client := pb.NewLeaderboardServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetRank(ctx, req.(*pb.GetRankRequest))
		if err != nil {
			utils.Error("Error calling GetRank", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.RegisterRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.Register(ctx, req.(*pb.RegisterRequest))
		if err != nil {
			utils.Error("Error calling Register", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.LoginRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.Login(ctx, req.(*pb.LoginRequest))
		if err != nil {
			utils.Error("Error calling Login", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.GetInventoryRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetInventory(ctx, req.(*pb.GetInventoryRequest))
		if err != nil {
			utils.Error("Error calling GetInventory", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.AddItemRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.AddItem(ctx, req.(*pb.AddItemRequest))
		if err != nil {
			utils.Error("Error calling AddItem", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.RemoveItemRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.RemoveItem(ctx, req.(*pb.RemoveItemRequest))
		if err != nil {
			utils.Error("Error calling RemoveItem", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.UseItemRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.UseItem(ctx, req.(*pb.UseItemRequest))
		if err != nil {
			utils.Error("Error calling UseItem", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.GetEquipmentsRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.GetEquipments(ctx, req.(*pb.GetEquipmentsRequest))
		if err != nil {
			utils.Error("Error calling GetEquipments", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.EquipItemRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.EquipItem(ctx, req.(*pb.EquipItemRequest))
		if err != nil {
			utils.Error("Error calling EquipItem", zap.Error(err))
			return nil, err
		}
		return resp, nil
	case "user.UnequipItemRequest":
		client := pb.NewUserServiceClient(conn.(*grpc.ClientConn))
		resp, err := client.UnequipItem(ctx, req.(*pb.UnequipItemRequest))
		if err != nil {
			utils.Error("Error calling UnequipItem", zap.Error(err))
			return nil, err
		}
		return resp, nil
	default:
		utils.Error("Unknown request type", zap.String("name", string(name)))
		return nil, fmt.Errorf("unsupported message type: %s", name)
	}
}
