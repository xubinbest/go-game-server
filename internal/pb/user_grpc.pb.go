// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: internal/pb/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_Register_FullMethodName               = "/user.UserService/Register"
	UserService_Login_FullMethodName                  = "/user.UserService/Login"
	UserService_GetInventory_FullMethodName           = "/user.UserService/GetInventory"
	UserService_AddItem_FullMethodName                = "/user.UserService/AddItem"
	UserService_RemoveItem_FullMethodName             = "/user.UserService/RemoveItem"
	UserService_UseItem_FullMethodName                = "/user.UserService/UseItem"
	UserService_GetEquipments_FullMethodName          = "/user.UserService/GetEquipments"
	UserService_EquipItem_FullMethodName              = "/user.UserService/EquipItem"
	UserService_UnequipItem_FullMethodName            = "/user.UserService/UnequipItem"
	UserService_GetUserInfo_FullMethodName            = "/user.UserService/GetUserInfo"
	UserService_GetUserCards_FullMethodName           = "/user.UserService/GetUserCards"
	UserService_ActivateCard_FullMethodName           = "/user.UserService/ActivateCard"
	UserService_UpgradeCard_FullMethodName            = "/user.UserService/UpgradeCard"
	UserService_UpgradeCardStar_FullMethodName        = "/user.UserService/UpgradeCardStar"
	UserService_GetUserPets_FullMethodName            = "/user.UserService/GetUserPets"
	UserService_AddPet_FullMethodName                 = "/user.UserService/AddPet"
	UserService_SetPetBattleStatus_FullMethodName     = "/user.UserService/SetPetBattleStatus"
	UserService_AddPetExp_FullMethodName              = "/user.UserService/AddPetExp"
	UserService_GetMonthlySignInfo_FullMethodName     = "/user.UserService/GetMonthlySignInfo"
	UserService_MonthlySign_FullMethodName            = "/user.UserService/MonthlySign"
	UserService_ClaimMonthlySignReward_FullMethodName = "/user.UserService/ClaimMonthlySignReward"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 用户注册
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 用户登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 获取背包
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	// 添加物品
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	// 移除物品
	RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error)
	// 使用物品
	UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error)
	// 获取装备信息
	GetEquipments(ctx context.Context, in *GetEquipmentsRequest, opts ...grpc.CallOption) (*GetEquipmentsResponse, error)
	// 装备物品
	EquipItem(ctx context.Context, in *EquipItemRequest, opts ...grpc.CallOption) (*EquipItemResponse, error)
	// 卸下装备
	UnequipItem(ctx context.Context, in *UnequipItemRequest, opts ...grpc.CallOption) (*UnequipItemResponse, error)
	// 获取玩家信息
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// 获取玩家所有卡牌信息
	GetUserCards(ctx context.Context, in *GetUserCardsRequest, opts ...grpc.CallOption) (*GetUserCardsResponse, error)
	// 激活卡牌
	ActivateCard(ctx context.Context, in *ActivateCardRequest, opts ...grpc.CallOption) (*ActivateCardResponse, error)
	// 卡牌升级
	UpgradeCard(ctx context.Context, in *UpgradeCardRequest, opts ...grpc.CallOption) (*UpgradeCardResponse, error)
	// 卡牌升星
	UpgradeCardStar(ctx context.Context, in *UpgradeCardStarRequest, opts ...grpc.CallOption) (*UpgradeCardStarResponse, error)
	// 获取玩家所有宠物信息
	GetUserPets(ctx context.Context, in *GetUserPetsRequest, opts ...grpc.CallOption) (*GetUserPetsResponse, error)
	// 添加宠物
	AddPet(ctx context.Context, in *AddPetRequest, opts ...grpc.CallOption) (*AddPetResponse, error)
	// 宠物出战/休战
	SetPetBattleStatus(ctx context.Context, in *SetPetBattleStatusRequest, opts ...grpc.CallOption) (*SetPetBattleStatusResponse, error)
	// 增加宠物经验
	AddPetExp(ctx context.Context, in *AddPetExpRequest, opts ...grpc.CallOption) (*AddPetExpResponse, error)
	// 获取月签到信息
	GetMonthlySignInfo(ctx context.Context, in *GetMonthlySignInfoRequest, opts ...grpc.CallOption) (*GetMonthlySignInfoResponse, error)
	// 月签到
	MonthlySign(ctx context.Context, in *MonthlySignRequest, opts ...grpc.CallOption) (*MonthlySignResponse, error)
	// 领取月签到累计奖励
	ClaimMonthlySignReward(ctx context.Context, in *ClaimMonthlySignRewardRequest, opts ...grpc.CallOption) (*ClaimMonthlySignRewardResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, UserService_GetInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, UserService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveItemResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UseItemResponse)
	err := c.cc.Invoke(ctx, UserService_UseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetEquipments(ctx context.Context, in *GetEquipmentsRequest, opts ...grpc.CallOption) (*GetEquipmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEquipmentsResponse)
	err := c.cc.Invoke(ctx, UserService_GetEquipments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EquipItem(ctx context.Context, in *EquipItemRequest, opts ...grpc.CallOption) (*EquipItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipItemResponse)
	err := c.cc.Invoke(ctx, UserService_EquipItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnequipItem(ctx context.Context, in *UnequipItemRequest, opts ...grpc.CallOption) (*UnequipItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnequipItemResponse)
	err := c.cc.Invoke(ctx, UserService_UnequipItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserCards(ctx context.Context, in *GetUserCardsRequest, opts ...grpc.CallOption) (*GetUserCardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCardsResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ActivateCard(ctx context.Context, in *ActivateCardRequest, opts ...grpc.CallOption) (*ActivateCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateCardResponse)
	err := c.cc.Invoke(ctx, UserService_ActivateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpgradeCard(ctx context.Context, in *UpgradeCardRequest, opts ...grpc.CallOption) (*UpgradeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeCardResponse)
	err := c.cc.Invoke(ctx, UserService_UpgradeCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpgradeCardStar(ctx context.Context, in *UpgradeCardStarRequest, opts ...grpc.CallOption) (*UpgradeCardStarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeCardStarResponse)
	err := c.cc.Invoke(ctx, UserService_UpgradeCardStar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserPets(ctx context.Context, in *GetUserPetsRequest, opts ...grpc.CallOption) (*GetUserPetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPetsResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserPets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddPet(ctx context.Context, in *AddPetRequest, opts ...grpc.CallOption) (*AddPetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPetResponse)
	err := c.cc.Invoke(ctx, UserService_AddPet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetPetBattleStatus(ctx context.Context, in *SetPetBattleStatusRequest, opts ...grpc.CallOption) (*SetPetBattleStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPetBattleStatusResponse)
	err := c.cc.Invoke(ctx, UserService_SetPetBattleStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddPetExp(ctx context.Context, in *AddPetExpRequest, opts ...grpc.CallOption) (*AddPetExpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPetExpResponse)
	err := c.cc.Invoke(ctx, UserService_AddPetExp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMonthlySignInfo(ctx context.Context, in *GetMonthlySignInfoRequest, opts ...grpc.CallOption) (*GetMonthlySignInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonthlySignInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetMonthlySignInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) MonthlySign(ctx context.Context, in *MonthlySignRequest, opts ...grpc.CallOption) (*MonthlySignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonthlySignResponse)
	err := c.cc.Invoke(ctx, UserService_MonthlySign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ClaimMonthlySignReward(ctx context.Context, in *ClaimMonthlySignRewardRequest, opts ...grpc.CallOption) (*ClaimMonthlySignRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimMonthlySignRewardResponse)
	err := c.cc.Invoke(ctx, UserService_ClaimMonthlySignReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// 用户注册
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 用户登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 获取背包
	GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error)
	// 添加物品
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	// 移除物品
	RemoveItem(context.Context, *RemoveItemRequest) (*RemoveItemResponse, error)
	// 使用物品
	UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error)
	// 获取装备信息
	GetEquipments(context.Context, *GetEquipmentsRequest) (*GetEquipmentsResponse, error)
	// 装备物品
	EquipItem(context.Context, *EquipItemRequest) (*EquipItemResponse, error)
	// 卸下装备
	UnequipItem(context.Context, *UnequipItemRequest) (*UnequipItemResponse, error)
	// 获取玩家信息
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// 获取玩家所有卡牌信息
	GetUserCards(context.Context, *GetUserCardsRequest) (*GetUserCardsResponse, error)
	// 激活卡牌
	ActivateCard(context.Context, *ActivateCardRequest) (*ActivateCardResponse, error)
	// 卡牌升级
	UpgradeCard(context.Context, *UpgradeCardRequest) (*UpgradeCardResponse, error)
	// 卡牌升星
	UpgradeCardStar(context.Context, *UpgradeCardStarRequest) (*UpgradeCardStarResponse, error)
	// 获取玩家所有宠物信息
	GetUserPets(context.Context, *GetUserPetsRequest) (*GetUserPetsResponse, error)
	// 添加宠物
	AddPet(context.Context, *AddPetRequest) (*AddPetResponse, error)
	// 宠物出战/休战
	SetPetBattleStatus(context.Context, *SetPetBattleStatusRequest) (*SetPetBattleStatusResponse, error)
	// 增加宠物经验
	AddPetExp(context.Context, *AddPetExpRequest) (*AddPetExpResponse, error)
	// 获取月签到信息
	GetMonthlySignInfo(context.Context, *GetMonthlySignInfoRequest) (*GetMonthlySignInfoResponse, error)
	// 月签到
	MonthlySign(context.Context, *MonthlySignRequest) (*MonthlySignResponse, error)
	// 领取月签到累计奖励
	ClaimMonthlySignReward(context.Context, *ClaimMonthlySignRewardRequest) (*ClaimMonthlySignRewardResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedUserServiceServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedUserServiceServer) RemoveItem(context.Context, *RemoveItemRequest) (*RemoveItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedUserServiceServer) UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseItem not implemented")
}
func (UnimplementedUserServiceServer) GetEquipments(context.Context, *GetEquipmentsRequest) (*GetEquipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipments not implemented")
}
func (UnimplementedUserServiceServer) EquipItem(context.Context, *EquipItemRequest) (*EquipItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipItem not implemented")
}
func (UnimplementedUserServiceServer) UnequipItem(context.Context, *UnequipItemRequest) (*UnequipItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnequipItem not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) GetUserCards(context.Context, *GetUserCardsRequest) (*GetUserCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCards not implemented")
}
func (UnimplementedUserServiceServer) ActivateCard(context.Context, *ActivateCardRequest) (*ActivateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCard not implemented")
}
func (UnimplementedUserServiceServer) UpgradeCard(context.Context, *UpgradeCardRequest) (*UpgradeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCard not implemented")
}
func (UnimplementedUserServiceServer) UpgradeCardStar(context.Context, *UpgradeCardStarRequest) (*UpgradeCardStarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCardStar not implemented")
}
func (UnimplementedUserServiceServer) GetUserPets(context.Context, *GetUserPetsRequest) (*GetUserPetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPets not implemented")
}
func (UnimplementedUserServiceServer) AddPet(context.Context, *AddPetRequest) (*AddPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPet not implemented")
}
func (UnimplementedUserServiceServer) SetPetBattleStatus(context.Context, *SetPetBattleStatusRequest) (*SetPetBattleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPetBattleStatus not implemented")
}
func (UnimplementedUserServiceServer) AddPetExp(context.Context, *AddPetExpRequest) (*AddPetExpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPetExp not implemented")
}
func (UnimplementedUserServiceServer) GetMonthlySignInfo(context.Context, *GetMonthlySignInfoRequest) (*GetMonthlySignInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlySignInfo not implemented")
}
func (UnimplementedUserServiceServer) MonthlySign(context.Context, *MonthlySignRequest) (*MonthlySignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonthlySign not implemented")
}
func (UnimplementedUserServiceServer) ClaimMonthlySignReward(context.Context, *ClaimMonthlySignRewardRequest) (*ClaimMonthlySignRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMonthlySignReward not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveItem(ctx, req.(*RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UseItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UseItem(ctx, req.(*UseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetEquipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetEquipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetEquipments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetEquipments(ctx, req.(*GetEquipmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EquipItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EquipItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EquipItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EquipItem(ctx, req.(*EquipItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnequipItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnequipItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnequipItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnequipItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnequipItem(ctx, req.(*UnequipItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserCards(ctx, req.(*GetUserCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ActivateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ActivateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ActivateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ActivateCard(ctx, req.(*ActivateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpgradeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpgradeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpgradeCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpgradeCard(ctx, req.(*UpgradeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpgradeCardStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeCardStarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpgradeCardStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpgradeCardStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpgradeCardStar(ctx, req.(*UpgradeCardStarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserPets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserPets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserPets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserPets(ctx, req.(*GetUserPetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddPet(ctx, req.(*AddPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetPetBattleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPetBattleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetPetBattleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetPetBattleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetPetBattleStatus(ctx, req.(*SetPetBattleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddPetExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPetExpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddPetExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddPetExp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddPetExp(ctx, req.(*AddPetExpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMonthlySignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlySignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMonthlySignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMonthlySignInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMonthlySignInfo(ctx, req.(*GetMonthlySignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_MonthlySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthlySignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).MonthlySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_MonthlySign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).MonthlySign(ctx, req.(*MonthlySignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ClaimMonthlySignReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimMonthlySignRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ClaimMonthlySignReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ClaimMonthlySignReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ClaimMonthlySignReward(ctx, req.(*ClaimMonthlySignRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _UserService_GetInventory_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _UserService_AddItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _UserService_RemoveItem_Handler,
		},
		{
			MethodName: "UseItem",
			Handler:    _UserService_UseItem_Handler,
		},
		{
			MethodName: "GetEquipments",
			Handler:    _UserService_GetEquipments_Handler,
		},
		{
			MethodName: "EquipItem",
			Handler:    _UserService_EquipItem_Handler,
		},
		{
			MethodName: "UnequipItem",
			Handler:    _UserService_UnequipItem_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserCards",
			Handler:    _UserService_GetUserCards_Handler,
		},
		{
			MethodName: "ActivateCard",
			Handler:    _UserService_ActivateCard_Handler,
		},
		{
			MethodName: "UpgradeCard",
			Handler:    _UserService_UpgradeCard_Handler,
		},
		{
			MethodName: "UpgradeCardStar",
			Handler:    _UserService_UpgradeCardStar_Handler,
		},
		{
			MethodName: "GetUserPets",
			Handler:    _UserService_GetUserPets_Handler,
		},
		{
			MethodName: "AddPet",
			Handler:    _UserService_AddPet_Handler,
		},
		{
			MethodName: "SetPetBattleStatus",
			Handler:    _UserService_SetPetBattleStatus_Handler,
		},
		{
			MethodName: "AddPetExp",
			Handler:    _UserService_AddPetExp_Handler,
		},
		{
			MethodName: "GetMonthlySignInfo",
			Handler:    _UserService_GetMonthlySignInfo_Handler,
		},
		{
			MethodName: "MonthlySign",
			Handler:    _UserService_MonthlySign_Handler,
		},
		{
			MethodName: "ClaimMonthlySignReward",
			Handler:    _UserService_ClaimMonthlySignReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/user.proto",
}
