// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: internal/pb/social.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SocialService_GetFriendList_FullMethodName            = "/social.SocialService/GetFriendList"
	SocialService_SendFriendRequest_FullMethodName        = "/social.SocialService/SendFriendRequest"
	SocialService_GetFriendRequestList_FullMethodName     = "/social.SocialService/GetFriendRequestList"
	SocialService_HandleFriendRequest_FullMethodName      = "/social.SocialService/HandleFriendRequest"
	SocialService_BatchHandleFriendRequest_FullMethodName = "/social.SocialService/BatchHandleFriendRequest"
	SocialService_DeleteFriend_FullMethodName             = "/social.SocialService/DeleteFriend"
	SocialService_CreateGuild_FullMethodName              = "/social.SocialService/CreateGuild"
	SocialService_GetGuildInfo_FullMethodName             = "/social.SocialService/GetGuildInfo"
	SocialService_GetGuildMembers_FullMethodName          = "/social.SocialService/GetGuildMembers"
	SocialService_ApplyToGuild_FullMethodName             = "/social.SocialService/ApplyToGuild"
	SocialService_InviteToGuild_FullMethodName            = "/social.SocialService/InviteToGuild"
	SocialService_GetGuildApplications_FullMethodName     = "/social.SocialService/GetGuildApplications"
	SocialService_HandleGuildApplication_FullMethodName   = "/social.SocialService/HandleGuildApplication"
	SocialService_KickGuildMember_FullMethodName          = "/social.SocialService/KickGuildMember"
	SocialService_ChangeMemberRole_FullMethodName         = "/social.SocialService/ChangeMemberRole"
	SocialService_TransferGuildMaster_FullMethodName      = "/social.SocialService/TransferGuildMaster"
	SocialService_DisbandGuild_FullMethodName             = "/social.SocialService/DisbandGuild"
	SocialService_LeaveGuild_FullMethodName               = "/social.SocialService/LeaveGuild"
	SocialService_GetGuildList_FullMethodName             = "/social.SocialService/GetGuildList"
	SocialService_SendChatMessage_FullMethodName          = "/social.SocialService/SendChatMessage"
	SocialService_GetChatMessages_FullMethodName          = "/social.SocialService/GetChatMessages"
)

// SocialServiceClient is the client API for SocialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialServiceClient interface {
	// 获取好友列表
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
	// 发送好友请求
	SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error)
	// 获取好友请求列表
	GetFriendRequestList(ctx context.Context, in *GetFriendRequestListRequest, opts ...grpc.CallOption) (*GetFriendRequestListResponse, error)
	// 处理好友请求
	HandleFriendRequest(ctx context.Context, in *HandleFriendRequestRequest, opts ...grpc.CallOption) (*HandleFriendRequestResponse, error)
	// 批量处理好友请求
	BatchHandleFriendRequest(ctx context.Context, in *BatchHandleFriendRequestRequest, opts ...grpc.CallOption) (*BatchHandleFriendRequestResponse, error)
	// 删除好友
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error)
	// 帮派相关接口
	// 创建帮派
	CreateGuild(ctx context.Context, in *CreateGuildRequest, opts ...grpc.CallOption) (*CreateGuildResponse, error)
	// 获取帮派信息
	GetGuildInfo(ctx context.Context, in *GetGuildInfoRequest, opts ...grpc.CallOption) (*GetGuildInfoResponse, error)
	// 获取帮派成员列表
	GetGuildMembers(ctx context.Context, in *GetGuildMembersRequest, opts ...grpc.CallOption) (*GetGuildMembersResponse, error)
	// 申请加入帮派
	ApplyToGuild(ctx context.Context, in *ApplyToGuildRequest, opts ...grpc.CallOption) (*ApplyToGuildResponse, error)
	// 邀请加入帮派
	InviteToGuild(ctx context.Context, in *InviteToGuildRequest, opts ...grpc.CallOption) (*InviteToGuildResponse, error)
	// 获取帮派申请列表
	GetGuildApplications(ctx context.Context, in *GetGuildApplicationsRequest, opts ...grpc.CallOption) (*GetGuildApplicationsResponse, error)
	// 处理帮派申请
	HandleGuildApplication(ctx context.Context, in *HandleGuildApplicationRequest, opts ...grpc.CallOption) (*HandleGuildApplicationResponse, error)
	// 踢出帮派成员
	KickGuildMember(ctx context.Context, in *KickGuildMemberRequest, opts ...grpc.CallOption) (*KickGuildMemberResponse, error)
	// 修改成员职位
	ChangeMemberRole(ctx context.Context, in *ChangeMemberRoleRequest, opts ...grpc.CallOption) (*ChangeMemberRoleResponse, error)
	// 转让帮主
	TransferGuildMaster(ctx context.Context, in *TransferGuildMasterRequest, opts ...grpc.CallOption) (*TransferGuildMasterResponse, error)
	// 解散帮派
	DisbandGuild(ctx context.Context, in *DisbandGuildRequest, opts ...grpc.CallOption) (*DisbandGuildResponse, error)
	// 离开帮派
	LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*LeaveGuildResponse, error)
	// 获取帮派列表(分页)
	GetGuildList(ctx context.Context, in *GetGuildListRequest, opts ...grpc.CallOption) (*GetGuildListResponse, error)
	// 聊天相关接口
	// 发送世界消息
	SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageResponse, error)
	// 获取世界消息历史
	GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error)
}

type socialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialServiceClient(cc grpc.ClientConnInterface) SocialServiceClient {
	return &socialServiceClient{cc}
}

func (c *socialServiceClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, SocialService_GetFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendFriendRequestResponse)
	err := c.cc.Invoke(ctx, SocialService_SendFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetFriendRequestList(ctx context.Context, in *GetFriendRequestListRequest, opts ...grpc.CallOption) (*GetFriendRequestListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendRequestListResponse)
	err := c.cc.Invoke(ctx, SocialService_GetFriendRequestList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) HandleFriendRequest(ctx context.Context, in *HandleFriendRequestRequest, opts ...grpc.CallOption) (*HandleFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleFriendRequestResponse)
	err := c.cc.Invoke(ctx, SocialService_HandleFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) BatchHandleFriendRequest(ctx context.Context, in *BatchHandleFriendRequestRequest, opts ...grpc.CallOption) (*BatchHandleFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchHandleFriendRequestResponse)
	err := c.cc.Invoke(ctx, SocialService_BatchHandleFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFriendResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateGuild(ctx context.Context, in *CreateGuildRequest, opts ...grpc.CallOption) (*CreateGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGuildResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetGuildInfo(ctx context.Context, in *GetGuildInfoRequest, opts ...grpc.CallOption) (*GetGuildInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuildInfoResponse)
	err := c.cc.Invoke(ctx, SocialService_GetGuildInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetGuildMembers(ctx context.Context, in *GetGuildMembersRequest, opts ...grpc.CallOption) (*GetGuildMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuildMembersResponse)
	err := c.cc.Invoke(ctx, SocialService_GetGuildMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ApplyToGuild(ctx context.Context, in *ApplyToGuildRequest, opts ...grpc.CallOption) (*ApplyToGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyToGuildResponse)
	err := c.cc.Invoke(ctx, SocialService_ApplyToGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) InviteToGuild(ctx context.Context, in *InviteToGuildRequest, opts ...grpc.CallOption) (*InviteToGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteToGuildResponse)
	err := c.cc.Invoke(ctx, SocialService_InviteToGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetGuildApplications(ctx context.Context, in *GetGuildApplicationsRequest, opts ...grpc.CallOption) (*GetGuildApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuildApplicationsResponse)
	err := c.cc.Invoke(ctx, SocialService_GetGuildApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) HandleGuildApplication(ctx context.Context, in *HandleGuildApplicationRequest, opts ...grpc.CallOption) (*HandleGuildApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleGuildApplicationResponse)
	err := c.cc.Invoke(ctx, SocialService_HandleGuildApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) KickGuildMember(ctx context.Context, in *KickGuildMemberRequest, opts ...grpc.CallOption) (*KickGuildMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickGuildMemberResponse)
	err := c.cc.Invoke(ctx, SocialService_KickGuildMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ChangeMemberRole(ctx context.Context, in *ChangeMemberRoleRequest, opts ...grpc.CallOption) (*ChangeMemberRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeMemberRoleResponse)
	err := c.cc.Invoke(ctx, SocialService_ChangeMemberRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) TransferGuildMaster(ctx context.Context, in *TransferGuildMasterRequest, opts ...grpc.CallOption) (*TransferGuildMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferGuildMasterResponse)
	err := c.cc.Invoke(ctx, SocialService_TransferGuildMaster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DisbandGuild(ctx context.Context, in *DisbandGuildRequest, opts ...grpc.CallOption) (*DisbandGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisbandGuildResponse)
	err := c.cc.Invoke(ctx, SocialService_DisbandGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*LeaveGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveGuildResponse)
	err := c.cc.Invoke(ctx, SocialService_LeaveGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetGuildList(ctx context.Context, in *GetGuildListRequest, opts ...grpc.CallOption) (*GetGuildListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuildListResponse)
	err := c.cc.Invoke(ctx, SocialService_GetGuildList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendChatMessageResponse)
	err := c.cc.Invoke(ctx, SocialService_SendChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatMessagesResponse)
	err := c.cc.Invoke(ctx, SocialService_GetChatMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServiceServer is the server API for SocialService service.
// All implementations must embed UnimplementedSocialServiceServer
// for forward compatibility.
type SocialServiceServer interface {
	// 获取好友列表
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	// 发送好友请求
	SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error)
	// 获取好友请求列表
	GetFriendRequestList(context.Context, *GetFriendRequestListRequest) (*GetFriendRequestListResponse, error)
	// 处理好友请求
	HandleFriendRequest(context.Context, *HandleFriendRequestRequest) (*HandleFriendRequestResponse, error)
	// 批量处理好友请求
	BatchHandleFriendRequest(context.Context, *BatchHandleFriendRequestRequest) (*BatchHandleFriendRequestResponse, error)
	// 删除好友
	DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error)
	// 帮派相关接口
	// 创建帮派
	CreateGuild(context.Context, *CreateGuildRequest) (*CreateGuildResponse, error)
	// 获取帮派信息
	GetGuildInfo(context.Context, *GetGuildInfoRequest) (*GetGuildInfoResponse, error)
	// 获取帮派成员列表
	GetGuildMembers(context.Context, *GetGuildMembersRequest) (*GetGuildMembersResponse, error)
	// 申请加入帮派
	ApplyToGuild(context.Context, *ApplyToGuildRequest) (*ApplyToGuildResponse, error)
	// 邀请加入帮派
	InviteToGuild(context.Context, *InviteToGuildRequest) (*InviteToGuildResponse, error)
	// 获取帮派申请列表
	GetGuildApplications(context.Context, *GetGuildApplicationsRequest) (*GetGuildApplicationsResponse, error)
	// 处理帮派申请
	HandleGuildApplication(context.Context, *HandleGuildApplicationRequest) (*HandleGuildApplicationResponse, error)
	// 踢出帮派成员
	KickGuildMember(context.Context, *KickGuildMemberRequest) (*KickGuildMemberResponse, error)
	// 修改成员职位
	ChangeMemberRole(context.Context, *ChangeMemberRoleRequest) (*ChangeMemberRoleResponse, error)
	// 转让帮主
	TransferGuildMaster(context.Context, *TransferGuildMasterRequest) (*TransferGuildMasterResponse, error)
	// 解散帮派
	DisbandGuild(context.Context, *DisbandGuildRequest) (*DisbandGuildResponse, error)
	// 离开帮派
	LeaveGuild(context.Context, *LeaveGuildRequest) (*LeaveGuildResponse, error)
	// 获取帮派列表(分页)
	GetGuildList(context.Context, *GetGuildListRequest) (*GetGuildListResponse, error)
	// 聊天相关接口
	// 发送世界消息
	SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageResponse, error)
	// 获取世界消息历史
	GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error)
	mustEmbedUnimplementedSocialServiceServer()
}

// UnimplementedSocialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSocialServiceServer struct{}

func (UnimplementedSocialServiceServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedSocialServiceServer) SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedSocialServiceServer) GetFriendRequestList(context.Context, *GetFriendRequestListRequest) (*GetFriendRequestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequestList not implemented")
}
func (UnimplementedSocialServiceServer) HandleFriendRequest(context.Context, *HandleFriendRequestRequest) (*HandleFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFriendRequest not implemented")
}
func (UnimplementedSocialServiceServer) BatchHandleFriendRequest(context.Context, *BatchHandleFriendRequestRequest) (*BatchHandleFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchHandleFriendRequest not implemented")
}
func (UnimplementedSocialServiceServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedSocialServiceServer) CreateGuild(context.Context, *CreateGuildRequest) (*CreateGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuild not implemented")
}
func (UnimplementedSocialServiceServer) GetGuildInfo(context.Context, *GetGuildInfoRequest) (*GetGuildInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildInfo not implemented")
}
func (UnimplementedSocialServiceServer) GetGuildMembers(context.Context, *GetGuildMembersRequest) (*GetGuildMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildMembers not implemented")
}
func (UnimplementedSocialServiceServer) ApplyToGuild(context.Context, *ApplyToGuildRequest) (*ApplyToGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyToGuild not implemented")
}
func (UnimplementedSocialServiceServer) InviteToGuild(context.Context, *InviteToGuildRequest) (*InviteToGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToGuild not implemented")
}
func (UnimplementedSocialServiceServer) GetGuildApplications(context.Context, *GetGuildApplicationsRequest) (*GetGuildApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildApplications not implemented")
}
func (UnimplementedSocialServiceServer) HandleGuildApplication(context.Context, *HandleGuildApplicationRequest) (*HandleGuildApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleGuildApplication not implemented")
}
func (UnimplementedSocialServiceServer) KickGuildMember(context.Context, *KickGuildMemberRequest) (*KickGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickGuildMember not implemented")
}
func (UnimplementedSocialServiceServer) ChangeMemberRole(context.Context, *ChangeMemberRoleRequest) (*ChangeMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMemberRole not implemented")
}
func (UnimplementedSocialServiceServer) TransferGuildMaster(context.Context, *TransferGuildMasterRequest) (*TransferGuildMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferGuildMaster not implemented")
}
func (UnimplementedSocialServiceServer) DisbandGuild(context.Context, *DisbandGuildRequest) (*DisbandGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisbandGuild not implemented")
}
func (UnimplementedSocialServiceServer) LeaveGuild(context.Context, *LeaveGuildRequest) (*LeaveGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGuild not implemented")
}
func (UnimplementedSocialServiceServer) GetGuildList(context.Context, *GetGuildListRequest) (*GetGuildListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildList not implemented")
}
func (UnimplementedSocialServiceServer) SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatMessage not implemented")
}
func (UnimplementedSocialServiceServer) GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedSocialServiceServer) mustEmbedUnimplementedSocialServiceServer() {}
func (UnimplementedSocialServiceServer) testEmbeddedByValue()                       {}

// UnsafeSocialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServiceServer will
// result in compilation errors.
type UnsafeSocialServiceServer interface {
	mustEmbedUnimplementedSocialServiceServer()
}

func RegisterSocialServiceServer(s grpc.ServiceRegistrar, srv SocialServiceServer) {
	// If the following call pancis, it indicates UnimplementedSocialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SocialService_ServiceDesc, srv)
}

func _SocialService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_SendFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).SendFriendRequest(ctx, req.(*SendFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetFriendRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFriendRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetFriendRequestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFriendRequestList(ctx, req.(*GetFriendRequestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_HandleFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).HandleFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_HandleFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).HandleFriendRequest(ctx, req.(*HandleFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_BatchHandleFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchHandleFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).BatchHandleFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_BatchHandleFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).BatchHandleFriendRequest(ctx, req.(*BatchHandleFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateGuild(ctx, req.(*CreateGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetGuildInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetGuildInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetGuildInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetGuildInfo(ctx, req.(*GetGuildInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetGuildMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetGuildMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetGuildMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetGuildMembers(ctx, req.(*GetGuildMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ApplyToGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyToGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ApplyToGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ApplyToGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ApplyToGuild(ctx, req.(*ApplyToGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_InviteToGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteToGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).InviteToGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_InviteToGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).InviteToGuild(ctx, req.(*InviteToGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetGuildApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetGuildApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetGuildApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetGuildApplications(ctx, req.(*GetGuildApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_HandleGuildApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleGuildApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).HandleGuildApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_HandleGuildApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).HandleGuildApplication(ctx, req.(*HandleGuildApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_KickGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickGuildMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).KickGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_KickGuildMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).KickGuildMember(ctx, req.(*KickGuildMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ChangeMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ChangeMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ChangeMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ChangeMemberRole(ctx, req.(*ChangeMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_TransferGuildMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGuildMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).TransferGuildMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_TransferGuildMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).TransferGuildMaster(ctx, req.(*TransferGuildMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DisbandGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbandGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DisbandGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DisbandGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DisbandGuild(ctx, req.(*DisbandGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_LeaveGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).LeaveGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_LeaveGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).LeaveGuild(ctx, req.(*LeaveGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetGuildList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetGuildList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetGuildList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetGuildList(ctx, req.(*GetGuildListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_SendChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).SendChatMessage(ctx, req.(*SendChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetChatMessages(ctx, req.(*GetChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialService_ServiceDesc is the grpc.ServiceDesc for SocialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social.SocialService",
	HandlerType: (*SocialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendList",
			Handler:    _SocialService_GetFriendList_Handler,
		},
		{
			MethodName: "SendFriendRequest",
			Handler:    _SocialService_SendFriendRequest_Handler,
		},
		{
			MethodName: "GetFriendRequestList",
			Handler:    _SocialService_GetFriendRequestList_Handler,
		},
		{
			MethodName: "HandleFriendRequest",
			Handler:    _SocialService_HandleFriendRequest_Handler,
		},
		{
			MethodName: "BatchHandleFriendRequest",
			Handler:    _SocialService_BatchHandleFriendRequest_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _SocialService_DeleteFriend_Handler,
		},
		{
			MethodName: "CreateGuild",
			Handler:    _SocialService_CreateGuild_Handler,
		},
		{
			MethodName: "GetGuildInfo",
			Handler:    _SocialService_GetGuildInfo_Handler,
		},
		{
			MethodName: "GetGuildMembers",
			Handler:    _SocialService_GetGuildMembers_Handler,
		},
		{
			MethodName: "ApplyToGuild",
			Handler:    _SocialService_ApplyToGuild_Handler,
		},
		{
			MethodName: "InviteToGuild",
			Handler:    _SocialService_InviteToGuild_Handler,
		},
		{
			MethodName: "GetGuildApplications",
			Handler:    _SocialService_GetGuildApplications_Handler,
		},
		{
			MethodName: "HandleGuildApplication",
			Handler:    _SocialService_HandleGuildApplication_Handler,
		},
		{
			MethodName: "KickGuildMember",
			Handler:    _SocialService_KickGuildMember_Handler,
		},
		{
			MethodName: "ChangeMemberRole",
			Handler:    _SocialService_ChangeMemberRole_Handler,
		},
		{
			MethodName: "TransferGuildMaster",
			Handler:    _SocialService_TransferGuildMaster_Handler,
		},
		{
			MethodName: "DisbandGuild",
			Handler:    _SocialService_DisbandGuild_Handler,
		},
		{
			MethodName: "LeaveGuild",
			Handler:    _SocialService_LeaveGuild_Handler,
		},
		{
			MethodName: "GetGuildList",
			Handler:    _SocialService_GetGuildList_Handler,
		},
		{
			MethodName: "SendChatMessage",
			Handler:    _SocialService_SendChatMessage_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _SocialService_GetChatMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/social.proto",
}
